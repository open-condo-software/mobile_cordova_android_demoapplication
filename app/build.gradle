plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id  "androidx.navigation.safeargs.kotlin"
    id 'kotlin-kapt'

}

apply plugin: 'kotlin-kapt'


android {
    compileSdk 34

    defaultConfig {
        applicationId "ai.doma.miniappdemo"
        minSdk 23
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        viewBinding = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.2"
    implementation project(path: ':CordovaLib')
    api "com.squareup.retrofit2:retrofit:2.7.1}"
    api "com.squareup.retrofit2:adapter-rxjava2:2.7.1"
    api "com.squareup.retrofit2:converter-gson:2.7.1"
    api "com.squareup.okhttp3:okhttp:4.9.1"
    api 'com.squareup.okhttp3:logging-interceptor:4.0.1'
    api "com.google.dagger:dagger:2.51.1"
    kapt "com.google.dagger:dagger-compiler:2.51.1"
    api "com.google.dagger:dagger-android:2.51.1"
    kapt "com.google.dagger:dagger-android-processor:2.51.1"
    implementation 'com.github.franmontiel:PersistentCookieJar:v1.0.1'
    implementation "androidx.navigation:navigation-fragment-ktx:2.4.1"
    implementation "androidx.navigation:navigation-ui-ktx:2.4.1"
    implementation "com.pdfview:pdfview-android:1.0.0"
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    kapt 'com.github.bumptech.glide:compiler:4.11.0'

    implementation 'org.altbeacon:android-beacon-library:2.19.6'
    implementation(platform("org.jetbrains.kotlin:kotlin-bom:1.8.0"))

    api "androidx.room:room-ktx:${versions.room}"
    api "androidx.room:room-runtime:${versions.room}"
    api "androidx.room:room-paging:${versions.room}"
    kapt "androidx.room:room-compiler:${versions.room}"

}

task updateCordovaProjectToDemo {
    doFirst {
        if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')){
            return
        }
        println "updateCordovaProjectToDemo start!"

        //update platforms/ios entirely
        exec {
            workingDir "../MainCordovaApplication"
            if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
                commandLine 'cordova', 'platform' ,'remove', 'ios'
            } else {
                commandLine 'cordova', 'platform' , 'remove', 'ios'
            }
        }
        exec {
            workingDir "../MainCordovaApplication"
            if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
                commandLine 'cordova', 'platform', 'add', 'ios'
            } else {
                commandLine 'cordova', 'platform', 'add', 'ios'
            }
        }
        exec {
            workingDir "../MainCordovaApplication"
            if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
                commandLine 'cordova', 'prepare', 'ios'
            } else {
                commandLine 'cordova', 'prepare', 'ios'
            }
        }
        exec {
            workingDir "../MainCordovaApplication/platforms/ios"
            if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
                commandLine 'tar', '-a', '-c', '-f', 'www.zip', 'www'
            } else {
                commandLine 'zip', '-r', 'www.zip', 'www'
            }
        }

        exec {
            workingDir "../MainCordovaApplication/platforms/ios"
            if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
                commandLine 'copy', '/y', 'www.zip', '..\\..\\..\\app\\src\\main\\res\\raw\\www.zip'
            } else {
                commandLine 'cp', 'www.zip', '../../../app/src/main/res/raw/www.zip'
            }
        }
        println "updateCordovaProjectToDemo"
    }

}

preBuild.dependsOn updateCordovaProjectToDemo